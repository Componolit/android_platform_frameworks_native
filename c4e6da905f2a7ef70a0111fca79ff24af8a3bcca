{
  "comments": [
    {
      "key": {
        "uuid": "7b303eb8_317902ea",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-08-20T18:27:25Z",
      "side": 1,
      "message": "Should say why it will be null, eg: \"Will be null if there is no extension set or non-null with one strong ref count.\"",
      "range": {
        "startLine": 522,
        "startChar": 48,
        "endLine": 522,
        "endChar": 60
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2008e44_94243a66",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 522,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-20T18:41:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b303eb8_317902ea",
      "range": {
        "startLine": 522,
        "startChar": 48,
        "endLine": 522,
        "endChar": 60
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51005437_65282e42",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-08-20T18:27:25Z",
      "side": 1,
      "message": "Is there any way to inspect the extension type? Are these named?",
      "range": {
        "startLine": 569,
        "startChar": 57,
        "endLine": 570,
        "endChar": 31
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a50f1cc_e1977be3",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-20T18:41:46Z",
      "side": 1,
      "message": "Updated, you do it with AIBinder_associateClass. The types are named, but the actual names being used by libbinder are not exposed in libbinder_ndk.",
      "parentUuid": "51005437_65282e42",
      "range": {
        "startLine": 569,
        "startChar": 57,
        "endLine": 570,
        "endChar": 31
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4deb8c_202f32ff",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 578,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-08-20T18:11:54Z",
      "side": 1,
      "message": "Is there a limit of a single extension per AIBinder? Is it feasible to make this a list instead so it composes better?",
      "range": {
        "startLine": 578,
        "startChar": 16,
        "endLine": 578,
        "endChar": 37
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "171efe18_a5e28328",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 578,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-20T18:41:46Z",
      "side": 1,
      "message": "So, this had been discussed on the original change and in threads (w/o a solution everyone was happy with tbh).\n\nOne should always be enough because a company should only extend an interface once (and if it is a big interface, the interface should contain semantic APIs for various subcomponents). Note also it is technically a linked list now. For instance, what we have seen most of in HIDL is only a single extension, but you could have a vendor extension attached to an OEM extension of an AOSP interface implementation.\n\nWe also discussed map instead of list (w/ both arbitrary int keys or type keys). These seem rather heavy weight since they have to be stored inside of the BBinder (can\u0027t really update IBinder virtual table).\n\nSo anyway in summary:\n- this is technically a list\n- the length of the list will usually be 1, 2 for extensions, and 3+ in rare cases\n- handles the generic case even though it is simple",
      "parentUuid": "6a4deb8c_202f32ff",
      "range": {
        "startLine": 578,
        "startChar": 16,
        "endLine": 578,
        "endChar": 37
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b13223ac_cfb9da82",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 578,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-08-20T19:12:13Z",
      "side": 1,
      "message": "\u003e One should always be enough because a company should only extend an interface once \n\nWell but this is in the NDK now not just the VNDK, so there\u0027s N companies involved. I can imagine these chaining easily as they pass between layers/apps, such as if GMScore wants to add some extensions to the camera interface, which itself had extensions added by a mainline module that got its interface from the HAL which etc...\n\nThe extension seems to be designed for these chaining situations, but then only lets the chain depth be 1. Does that make sense in the NDK where suddenly this could span apps and pseudo-framework (gmscore) and framework (+modules) and HAL vendors?",
      "parentUuid": "171efe18_a5e28328",
      "range": {
        "startLine": 578,
        "startChar": 16,
        "endLine": 578,
        "endChar": 37
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e01c3b6_47e4d80f",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 578,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-20T19:36:18Z",
      "side": 1,
      "message": "I think it still does:\n- there is typically one owner of an interface in these various situations, so they shouldn\u0027t ever need to use this API. They should instead add functionality to their interface (e.g. strongly typed getSemanticSubInterface() OR specific actions doFoo()).\n- AIDL interfaces are not shared between the platform/apps\n\n\u003e if GMScore wants to add some extensions to the camera interface, which itself had extensions added by a mainline module that got its interface from the HAL which etc...\n\nOnly the server can add extensions with this API. GMScore can\u0027t tag on additional information to someone else\u0027s binder. That could get a bit messy even w/ lists. The only option for GMScore is to offer additional functionalities on its own interface.",
      "parentUuid": "b13223ac_cfb9da82",
      "range": {
        "startLine": 578,
        "startChar": 16,
        "endLine": 578,
        "endChar": 37
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f116f72_0181c9c5",
        "filename": "libs/binder/ndk/include_ndk/android/binder_ibinder.h",
        "patchSetId": 1
      },
      "lineNbr": 578,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2019-08-20T21:34:07Z",
      "side": 1,
      "message": "Does this make sense as an NDK API at all then or should this be tagged VNDK? In what scenario would I want to use this as a mainline module or 3rd party application?",
      "parentUuid": "8e01c3b6_47e4d80f",
      "range": {
        "startLine": 578,
        "startChar": 16,
        "endLine": 578,
        "endChar": 37
      },
      "revId": "c4e6da905f2a7ef70a0111fca79ff24af8a3bcca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}