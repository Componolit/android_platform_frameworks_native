{
  "comments": [
    {
      "key": {
        "uuid": "29a47c5a_59d1f44d",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T17:54:57Z",
      "side": 1,
      "message": "why int32_t length and not size_t?",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 87
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f567b44_98447659",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "Will change (once the utf16/utf8 discussion is resolved).",
      "parentUuid": "29a47c5a_59d1f44d",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 87
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c653a2_6a56cfc1",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T23:12:43Z",
      "side": 1,
      "message": "Done (this was an implementation detail being exposed, now it just fails if it is too big)",
      "parentUuid": "7f567b44_98447659",
      "range": {
        "startLine": 94,
        "startChar": 73,
        "endLine": 94,
        "endChar": 87
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5932d3a4_bc3b4054",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T17:54:57Z",
      "side": 1,
      "message": "document the parameters. What is void* data? Should probably call it void* userContext?\n\nwhy int32_t length and not size_t?",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca5f40ff_3b499aa2",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "Will change (once the utf16/utf8 discussion is resolved).",
      "parentUuid": "5932d3a4_bc3b4054",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44eb2520_ef2753cf",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T23:12:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca5f40ff_3b499aa2",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bb33099_edb2598c",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T17:54:57Z",
      "side": 1,
      "message": "where is the resulting char* that comes out of the allocator?\n\nSuggest renaming the void* data to void* userContext. \"data\" is vague and unclear.",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 110,
        "endChar": 67
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4855c27_afe16d15",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "Will change (once the utf16/utf8 discussion is solved).",
      "parentUuid": "2bb33099_edb2598c",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 110,
        "endChar": 67
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eba1f357_43c40bcf",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T23:12:43Z",
      "side": 1,
      "message": "Done. I\u0027ve renamed it to stringData though in order to distinguish it from userData (on AIBinder). Also, I\u0027ve amended the documentation to be more clear.",
      "parentUuid": "f4855c27_afe16d15",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 110,
        "endChar": 67
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e970f17b_b6fc4cf6",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-10-04T21:09:23Z",
      "side": 1,
      "message": "IMO if we\u0027re going to expose any C++ wrappers they should go further than this. An actual AParcel class would be worthwhile.",
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6652365e_2ef039b7",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "This file just has wrappers for std::string. You can see that full AParcel class here:\nhttps://android-review.googlesource.com/c/platform/frameworks/native/+/740001\n\nAlthough it is still very minimal.",
      "parentUuid": "e970f17b_b6fc4cf6",
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "309af708_dd19c451",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T23:12:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6652365e_2ef039b7",
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "431bb970_1ffafcd7",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T17:54:57Z",
      "side": 1,
      "message": "str.data()",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87188ef6_44b106c5",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T17:55:41Z",
      "side": 1,
      "message": "or even just str.c_str()",
      "parentUuid": "431bb970_1ffafcd7",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "288c25cd_b8869ce2",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "It\u0027s not mutable.",
      "parentUuid": "87188ef6_44b106c5",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b4e5020_ceaf25c7",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2018-10-04T21:38:14Z",
      "side": 1,
      "message": ".data() is now, but I\u0027d rather a const_cast on .data() or .c_str() to this hack.",
      "parentUuid": "288c25cd_b8869ce2",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3622ae0b_6f0f7a2f",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T23:12:43Z",
      "side": 1,
      "message": "Either way, it\u0027s returning a reference to the same exact memory in practice. \u0026s[0] is also used a lot in our codebase already. Specifically C++11 section 21.4.1.5, defines contiguity with this identity: \"\u0026*(s.begin() + n) \u003d\u003d \u0026*s.begin() + n\". Since *s.begin() \u003d\u003d s[0], the standard is suggesting to use a buffer like this. The one downside to my solution is that it assumes \u0026s[0] + s.size() \u003d\u003d \u0027\\0\u0027. The standard heavily suggests this since c_str must be null terminated and return in constant time. In any implementation Android would use, this is the case, but \u0026s[s.size()] is technically considered to be undefined behavior. So, I\u0027ve updated the current patchset to allocate an extra byte for correctness. Let me know if you still feel strongly about the const_cast, and I can change it.",
      "parentUuid": "4b4e5020_ceaf25c7",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b66c6dd_2fd9d159",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-05T00:11:44Z",
      "side": 1,
      "message": "\u003e .data() is now\n\nI agree that is better, but it does appear to be C++17.",
      "parentUuid": "3622ae0b_6f0f7a2f",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d26f5db5_c61b72e8",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2018-10-05T01:20:27Z",
      "side": 1,
      "message": "FYI, referring C++11 21.4.5 and 21.4.7.1, \u0026s[s.size()] is not an undefined behavior since C++11, and it is guaranteed that 1) value of s[s.size()] is always charT(), 2) c_str()[i] \u003d\u003d data[i] \u003d\u003d \u0026operator[](i) for i in [0, size()].",
      "parentUuid": "5b66c6dd_2fd9d159",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4509a0ae_22f02723",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2018-10-05T01:21:35Z",
      "side": 1,
      "message": "(a typo there, I mean c_str()[i], data()[i], \u0026operator[](i) are all identical)",
      "parentUuid": "d26f5db5_c61b72e8",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9317a3c2_031f6c88",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-05T01:30:20Z",
      "side": 1,
      "message": "Yeah, but see 21.4.5.2, talking about operator[].\n\nIt says: \"*(begin() + pos) if pos \u003c size(), otherwise a reference to an object of type T with value charT(); the referenced value shall not be modified.\"\n\nSo it seems operator[] when pos \u003d\u003d size() will return charT(), but it isn\u0027t guaranteed (anywhere that I can find) that the location in memory at \u0026s[0] + s.size() is actually guaranteed to be charT() or to be valid. In practice, it always will be, but now the current patchset is pedantically correct at the cost of one extra byte per string. I definitely prefer using \"\u0026s[0]\" and \"resize(length-1)\", but I still think it is UB.",
      "parentUuid": "d26f5db5_c61b72e8",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce527df_272daecd",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1291338
      },
      "writtenOn": "2018-10-05T01:43:42Z",
      "side": 1,
      "message": "OK, let me elaborate more.\n\n1) 21.4.7.1 says that\n- c_str() and data() are identical, so let\u0027s think only data().\n- data() returns a pointer p such that p + i \u003d\u003d \u0026operator[](i) for i in [0, size()]. Note that size() is included in the range.\n\n2) 21.4.5 says that operator[](size()) is a reference with value charT()\n\nSo data() + size() \u003d\u003d \u0026operator[](size()), its value is always charT(), and it\u0027s perfectly fine to write \u0026s[0].",
      "parentUuid": "9317a3c2_031f6c88",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 22
      },
      "revId": "5efb9a6acf73ec93a5fc86e4298f31206bd9ce73",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}