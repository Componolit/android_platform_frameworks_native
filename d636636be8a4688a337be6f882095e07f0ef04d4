{
  "comments": [
    {
      "key": {
        "uuid": "7f6a8491_083efb01",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T03:45:01Z",
      "side": 1,
      "message": "I\u0027ll probably be repeating this pattern for arrays + vectors. If someone has a better suggestion, let me know.",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1c7ca9a_227a63f4",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-10-04T16:36:45Z",
      "side": 1,
      "message": "The need for \u0027data\u0027 makes me uncomfortable. It looks like it is designed with std::string in mind. Also, you will be directly writing into the internal data array of std::string, which is actually breaking abstraction.\n\nIf I were you, I would like to design the API as follows:\n\nAParcel_readString(AParcel*, void (*callback)(const char*, size_t))\n\nThe callback can just point to the data on parcel without copying. The clients can then choose to use it in-place (e.g. printf) or copy it to somewhere (e.g. std::string)",
      "parentUuid": "7f6a8491_083efb01",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d59fd61_f1728d72",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T16:57:48Z",
      "side": 1,
      "message": "I\u0027ll change this to that. I like it better. Thanks!",
      "parentUuid": "a1c7ca9a_227a63f4",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ec137a_9515e62a",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T17:19:39Z",
      "side": 1,
      "message": "Actually, I started doing this, and then I remembered why I did this convoluted way.\n\nThe NDK library needs the buffer to do the utf16_to_utf8 transformation onto. Doing it your way would require an extra copy (even though it is a cleaner API).\n\nI justify breaking into the std::string since the internal data array is guaranteed to be contiguous w/ C++11.\n\nI think I\u0027ll use your method for other data types which will never need transformations like this.\n\nAlso, with your method, I would still need a void* data. I would want something like \"AParcel_readString(AParcel*, void(*callback)(void* data, const char*, size_t), void*)\" so that the client can also pass the data structure they want to fill out to the allocator without having to deal with some global variable.\n\nAlso, it\u0027s possible to use the current API without std::string. For instance (but you can also imagine String8, std::vector, etc..):\nstatic inline char* AParcel_char_star_allocator(void* data, int32_t length) {\n    char** str \u003d static_cast\u003cchar**\u003e(data);\n    *str \u003d malloc(length * sizeof(char));\n    return *str;\n}",
      "parentUuid": "2d59fd61_f1728d72",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d16bdee7_8b2cd681",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2018-10-04T21:09:23Z",
      "side": 1,
      "message": "\u003e The NDK library needs the buffer to do the utf16_to_utf8 transformation onto.\n\nIt\u0027s a little weird to me that we aren\u0027t exposing this as a char16_t API. It might be better to perform that minimum task and handle char* and std::string conversions elsewhere. We\u0027d be able to do so with a cleaner interface anyway since the char16_t API could just report the size that it read rather than requiring that user to pass in an allocator (that is sometimes a reallocator, but might not be).",
      "parentUuid": "f7ec137a_9515e62a",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ed1475d_5f422416",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T21:32:30Z",
      "side": 1,
      "message": "I\u0027ve added you guys to the original discussion in the design doc about this. The reason is that most APIs in C/C++ already work with utf8. Using utf16 will require making a copy of the string in 99% of cases, and APIs to do this aren\u0027t overly easy to use.",
      "parentUuid": "d16bdee7_8b2cd681",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c53b0f2_c8313d9c",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T03:59:14Z",
      "side": 1,
      "message": "also, at the api council, is there a preference for something like this to be in a namespace? In the CL after this, I\u0027m putting them in an \u0027::android\u0027 namespace",
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb3bff2e_69eb1fe9",
        "filename": "libs/binder/ndk/include_ndk/android/binder_parcel_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2018-10-04T16:36:45Z",
      "side": 1,
      "message": "I don\u0027t like this...",
      "range": {
        "startLine": 28,
        "startChar": 11,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb6c53e8_98ab30b3",
        "filename": "libs/binder/ndk/parcel.cpp",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-10-04T03:45:01Z",
      "side": 1,
      "message": "I\u0027m a little bit sad that utf16_to_utf8_length and other methods return -1 in this degenerate case. I\u0027m tempted to fix them, but it would have to be a follow-up.",
      "range": {
        "startLine": 115,
        "startChar": 8,
        "endLine": 115,
        "endChar": 17
      },
      "revId": "d636636be8a4688a337be6f882095e07f0ef04d4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}